The purpose of a recipe is to take a raw dataset
and convert it into a complete ASR system.
The name of the recipe, or rather, the name
of the directory where the recipe resides,
usually reflects the dataset.
For example, the recipe based on the Wallstreet Journal corpus
is implemented in the directory \verb!egs/wsj!.
In the remainder of this document
we will omit the prefix \verb!egs/! of a recipe.

As mentioned above, the main steps of a recipe are implemented
as scripts in the \verb!steps! and \verb!utils!
subdirectories of the recipe. Typically these are symbolic
links to the corresponding directories of the
\verb!wsj! recipe. The exact sequence of steps to be taken 
in converting the dataset into an ASR system appears in
the main script, \verb!run.sh!, residing at the root level
of the recipe, alongside \verb!steps! and \verb!utils!.
The fact that most recipes share the same \verb!tools! and \verb!utils!
directories reflects the fact that most ASR tasks consist of the
same basic sequence of steps, differing only in parameter selection
and data preparation.

Unfortunately, a new dataset typically arrives in a
format different from previously
handled datasets. Therefore, one typically crafts a variety of programs,
usually in \textsf{Python}, \textsf{Perl}, or \verb!bash!, to convert
the data to the form needed by subsequent parts of the pipeline.
These scripts are unique to the recipe
and are usually found in the \verb!local! subdirectory of the recipe.

Also at the root level one typically finds two additional files.
The file \verb!path.sh! sets up execution paths
in such a way that the scripts in
the \verb!steps! and \verb!utils! directories
will be able to locate relevant executables.
The file \verb!cmd.sh! is used to select how multiprocess jobs
will be scheduled for execution.
The file simply sets a variable to either
\verb!run.pl! (for local execution) or \verb!queue.pl!
(for execution by multiple nodes of a cluster).
The files \verb!cmd.sh! and \verb!path.sh!
should not be executed, but rather {\em sourced}.
It is likely that the user will need to modify both of
these files to reflect the configuration of his or her system.
We emphasize that the programs in \verb!utils! and \verb!tools!
call one another using relative pathnames, meaningful only
after one has set up the \verb!PATH! variable appropriately, which
is accomplished by sourcing \verb!path.sh!.

Finally, the main program
\verb!run.sh! will typically create two new subdirectories,
\verb!data!, where it puts data accumulated and calculated during
the process, and \verb!exp!, where it stores higher-level results.
